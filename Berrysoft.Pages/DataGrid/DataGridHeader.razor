<th scope="col" style="cursor: @(Sortable ? "pointer" : "auto")" @onclick="OnColumnClick">
    <div class="row">
        <div class="col">
            @ChildContent
        </div>
        <div class="col-auto" hidden="@IconHidden">
            <span class="fas @IconClass"></span>
        </div>
    </div>
</th>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Sortable { get; set; }

    [Parameter]
    public string? PropertyName { get; set; }

    [CascadingParameter]
    public DataGridBase? Grid { get; set; }

    private Action<string, DataGridSortDirection>? onclick;

    public DataGridSortDirection SortDirection { get; set; }

    private string IconClass => SortDirection switch
    {
        DataGridSortDirection.Ascending => "fa-chevron-up",
        DataGridSortDirection.Descending => "fa-chevron-down",
        _ => string.Empty
    };

    private bool IconHidden => !Sortable || (SortDirection != DataGridSortDirection.Ascending && SortDirection != DataGridSortDirection.Descending);

    protected override void OnParametersSet()
    {
        if (Grid != null)
        {
            onclick = Grid.SetColumnSortDirection;
            Grid.ColumnSorted += OnGridSorted;
        }
    }

    private void OnColumnClick()
    {
        if (Sortable && PropertyName != null)
        {
            var dir = SortDirection;
            if (dir < DataGridSortDirection.Descending)
                dir++;
            else
                dir = DataGridSortDirection.None;
            SortDirection = dir;
            onclick?.Invoke(PropertyName, SortDirection);
        }
    }

    private void OnGridSorted(object sender, string e)
    {
        if (e != PropertyName)
        {
            SortDirection = DataGridSortDirection.None;
        }
    }
}
