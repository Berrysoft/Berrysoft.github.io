<th scope="col" style="cursor: @(Sortable ? "pointer" : "auto")" @onclick="OnColumnClick">
    @ChildContent
    <span class="fas @IconClass" hidden="@IconHidden"></span>
</th>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Sortable { get; set; }

    [Parameter]
    public string PropertyName { get; set; }

    [CascadingParameter]
    public DataGridBase Grid { get; set; }

    private Action<string, DataGridSortDirection> onclick;

    public DataGridSortDirection SortDirection { get; set; }

    private string IconClass => SortDirection switch
    {
        DataGridSortDirection.Ascending => "fa-chevron-up",
        DataGridSortDirection.Descending => "fa-chevron-down",
        _ => string.Empty
    };

    private bool IconHidden => !Sortable || (SortDirection != DataGridSortDirection.Ascending && SortDirection != DataGridSortDirection.Descending);

    protected override void OnParametersSet()
    {
        onclick = Grid.SetColumnSortDirection;
        Grid.ColumnSorted += OnGridSorted;
    }

    private void OnColumnClick()
    {
        if (Sortable)
        {
            var dir = SortDirection;
            if (dir < DataGridSortDirection.Descending)
                dir++;
            else
                dir = DataGridSortDirection.None;
            SortDirection = dir;
            onclick?.Invoke(PropertyName, SortDirection);
        }
    }

    private void OnGridSorted(object sender, string e)
    {
        if (e != PropertyName)
        {
            SortDirection = DataGridSortDirection.None;
        }
    }
}
