@page "/blog/{filename}"

@using Berrysoft.Pages.Data
@using Berrysoft.Pages.HighlightJs
@using Berrysoft.Pages.Katex
@using Markdig
@using Pek.Markdig.HighlightJs

@implements IDisposable

@inject ILocalizationService Localization
@inject IBlogService BlogService
@inject IHighlightJsEngine HighlightJsEngine
@inject IKatexEngine KatexEngine

@if (notFound)
{
    <NotFoundComponent />
}
else if (text != null && post != null)
{
    <div class="fade-in fade-in-1">
        <h1>@post.Title</h1>
        <p class="text-secondary">
            <time datetime="@post.Date">@post.Date.ToString(Localization.Culture.DateTimeFormat.FullDateTimePattern, Localization.Culture)</time>
        </p>
    </div>
    <div class="fade-in fade-in-2">
        @((MarkupString)text)
    </div>
}

@code {
    [Parameter]
    public string? Filename { get; set; }

    private BlogPost? post;
    private string? text;
    private bool notFound;

    private MarkdownPipeline? markdigPipeline;

    protected override void OnInitialized()
    {
        if (markdigPipeline == null)
            markdigPipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().UseHighlightJs(HighlightJsEngine).UseKatex(KatexEngine).Build();
        Localization.LanguageChanged += OnLanguageChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            post = await BlogService.GetBlogPostAsync(Filename!);
            if (post == null)
            {
                text = null;
                notFound = true;
            }
            else
            {
                text = Markdown.ToHtml(await BlogService.GetBlogPostContentAsync(Filename!), markdigPipeline);
                notFound = false;
            }
            StateHasChanged();
        }
    }

    private void OnLanguageChanged(object sender, string e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Localization.LanguageChanged -= OnLanguageChanged;
    }
}
