@page "/counter"

@using System.Linq
@using System.Text
@using W8lessLabs.Blazor.LocalFiles

@inject IJSRuntime JSRuntime

<h1><Tred Key="counterTitle" /></h1>

<table class="table">
    <thead>
        <tr>
            <th scope="col"><Tred Key="counterTotalCount" /></th>
            <th scope="col"><Tred Key="counterDistinctCount" /></th>
            <th scope="col"><Tred Key="counterSentenceCount" /></th>
            <th scope="col"><Tred Key="counterAverageCount" /></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@totalCount</td>
            <td>@distinctCount</td>
            <td>@sentenceCount</td>
            <td>@averageCount</td>
        </tr>
    </tbody>
</table>

<FileSelect @ref="fileSelect" @ref:suppressField />

<div class="btn-group" role="group">
    <button type="button" class="btn btn-primary" @onclick="OpenFile">导入</button>
    <button type="button" class="btn btn-secondary" @onclick="SaveFile">导出</button>
</div>

<textarea class="form-control" style="height: 60vh; resize: vertical;" @bind-value="Text" @bind-value:event="oninput" />

@code {
    [Parameter]
    public string Lang { get; set; }

    int totalCount = 0;
    int distinctCount = 0;
    int sentenceCount = 0;
    int? averageCount = null;

    private string text = string.Empty;
    public string Text
    {
        get => text;
        set
        {
            text = value;
            CalculateCounts();
        }
    }

    static readonly char[] WordSeparator = new char[] { ' ', '\r', '\n', '.', ',', '!', '?', ':', ';', '(', ')' };
    static readonly char[] WordTrimmer = new char[] { '-', '\'', '\"' };
    static readonly string[] SentenceSeparator = new string[] { "\r", "\n", ". ", "! ", "? " };

    private void CalculateCounts()
    {
        var words = text
            .Split(WordSeparator, StringSplitOptions.RemoveEmptyEntries)
            .Select(w => w.Trim(WordTrimmer))
            .Where(w => !string.IsNullOrEmpty(w))
            .ToArray();
        totalCount = words.Length;
        distinctCount = words.Distinct(StringComparer.OrdinalIgnoreCase).Count();
        sentenceCount = text
            .Split(SentenceSeparator, StringSplitOptions.RemoveEmptyEntries)
            .Select(w => w.Trim())
            .Where(w => !string.IsNullOrEmpty(w))
            .Count();
        averageCount = sentenceCount == 0 ? (int?)null : totalCount / sentenceCount;
    }

    private FileSelect fileSelect;

    private void OpenFile()
    {
        fileSelect.SelectFiles(async (selectedFiles) =>
        {
            SelectedFile file = selectedFiles.FirstOrDefault();
            if (file != null)
            {
                using (var fileReader = fileSelect.GetFileReader(file))
                {
                    byte[] fileContent = await fileReader.GetFileBytesAsync();
                    Text = Encoding.UTF8.GetString(fileContent);
                    StateHasChanged();
                }
            }
        });
    }

    private async void SaveFile()
    {
        await JSRuntime.InvokeAsync<object>("saveFile", "article.txt", Encoding.UTF8.GetBytes(Text));
    }
}
