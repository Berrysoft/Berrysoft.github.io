@using Berrysoft.Pages.Data

@implements IDisposable

@inject IThemeService ThemeService

<header class="navbar fixed-top navbar-expand-lg @(ThemeService.Navbar == ThemeType.Dark ? "navbar-dark bg-dark" : "navbar-light bg-light")">
    <div class="container">
        <a class="navbar-brand" href="">Berrysoft</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div id="navbarSupportedContent" class="navbar-collapse collapse">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <Tred Key="navHome" />
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="counter">
                        <Tred Key="navCounter" />
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="blog">
                        <Tred Key="navBlog" />
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="about">
                        <Tred Key="navAbout" />
                    </NavLink>
                </li>
            </ul>
        </div>
    </div>
</header>

@code {
    protected override async Task OnInitializedAsync()
    {
        ThemeService.ThemeChanged += OnThemeChanged;
        await Task.Run(async () =>
        {
            await ThemeService.LoadDataAsync();
            StateHasChanged();
        });
    }

    private void OnThemeChanged(object sender, Theme t)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}
